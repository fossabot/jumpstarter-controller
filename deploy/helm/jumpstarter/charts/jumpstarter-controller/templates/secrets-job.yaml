{{- $namespace := default .Release.Namespace .Values.namespace }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: jumpstarter-controller
  name: jumpstarter-secrets
  namespace: {{ $namespace }}
spec:
  template:
    metadata:
      name: jumpstarter-secrets
    spec:
      ttlSecondsAfterFinished: 600
      serviceAccountName: controller-manager
      containers:
        - name: jumpstarter-secrets
          image: quay.io/jumpstarter-dev/jumpstarter-utils:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e

              CONTROLLER_HOSTNAME=$(trurl {{ template "controller.endpoint" . }} --get "{host}")
              ROUTER_HOSTNAME=$(trurl {{ template "router.endpoint" . }} --get "{host}")

              export EASYRSA_BATCH=1
              export EASYRSA_PKI=pki
              /usr/share/easy-rsa/3/easyrsa init-pki
              /usr/share/easy-rsa/3/easyrsa --no-pass build-ca
              /usr/share/easy-rsa/3/easyrsa --no-pass \
                --subject-alt-name=DNS:"${CONTROLLER_HOSTNAME}" \
                --subject-alt-name=DNS:"${ROUTER_HOSTNAME}" \
                build-server-full "${CONTROLLER_HOSTNAME}"

              if ! kubectl get secret jumpstarter-tls-ca -n {{ $namespace }} >/dev/null 2>&1; then
                kubectl create secret tls jumpstarter-tls-ca -n={{ $namespace }} \
                  --cert=pki/ca.crt --key=pki/private/ca.key
              fi

              if ! kubectl get secret jumpstarter-tls -n {{ $namespace }} >/dev/null 2>&1; then
                kubectl create secret tls jumpstarter-tls -n={{ $namespace }} \
                  --cert=pki/issued/"${CONTROLLER_HOSTNAME}".crt \
                  --key=pki/private/"${CONTROLLER_HOSTNAME}".key
              fi

              {{- range $name := tuple "jumpstarter-router-secret" "jumpstarter-controller-secret" }}
              if ! kubectl get secret {{ $name }} -n {{ $namespace }} >/dev/null 2>&1; then
                kubectl create secret generic {{ $name }} -n={{ $namespace }} \
                  --from-literal=key="$(openssl rand -hex 32)"
              fi
              {{- end }}
      restartPolicy: Never
